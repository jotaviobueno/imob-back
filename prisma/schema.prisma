// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Person {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String    @map("full_name")
  email       String
  phone       String
  cpf         String
  rg          String?
  birthDate   DateTime  @map("birth_date")
  gender      GENDER
  nationality String?
  user        User?
  customer    Customer?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  @@map("person")
}

enum GENDER {
  FAMALE
  MALE
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  person         Person           @relation(fields: [personId], references: [id])
  personId       String           @unique @map("person_id") @db.ObjectId
  password       String
  avatar         String?
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamp
  userRealEstate UserRealEstate[]
  userRole       UserRole[]

  @@map("user")
}

model UserRealEstate {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @map("user_id") @db.ObjectId
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
  realEstateId String     @map("real_estate_id") @db.ObjectId
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamp
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamp

  @@map("user_real_estate")
}

model Customer {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  person             Person               @relation(fields: [personId], references: [id])
  personId           String               @unique @map("person_id") @db.ObjectId
  address            Address              @relation(fields: [addressId], references: [id])
  addressId          String               @map("address_id") @db.ObjectId
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp
  updatedAt          DateTime             @default(now()) @map("updated_at") @db.Timestamp
  deletedAt          DateTime?            @map("deleted_at") @db.Timestamp
  customerRealEstate CustomerRealEstate[]
  customerProperty   CustomerProperty[]

  @@map("customer")
}

model CustomerProperty {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  type       CUSTOMER_PROPERTY_TYPE
  property   Property               @relation(fields: [propertyId], references: [id])
  propertyId String                 @map("property_id") @db.ObjectId
  customer   Customer               @relation(fields: [customerId], references: [id])
  customerId String                 @map("customer_id") @db.ObjectId

  @@map("customer_property")
}

enum CUSTOMER_PROPERTY_TYPE {
  RENT_PROPERTY
  OWNER_PROPERTY
}

model CustomerRealEstate {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])
  realEstateId String     @db.ObjectId
  customer     Customer   @relation(fields: [customerId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamp
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamp
  customerId   String     @db.ObjectId

  @@map("customer_real_estate")
}

model RealEstate {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  cnpj               String
  address            Address?             @relation(fields: [addressId], references: [id])
  addressId          String?              @map("address_id") @db.ObjectId
  descriptions       String[]             @default([])
  images             String[]             @default([])
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp
  updatedAt          DateTime             @default(now()) @map("updated_at") @db.Timestamp
  deletedAt          DateTime?            @map("deleted_at") @db.Timestamp
  property           Property[]
  customerRealEstate CustomerRealEstate[]
  userRealEstate     UserRealEstate[]

  @@map("real_estate")
}

model Property {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  description      String
  isActive         Boolean            @default(true) @map("is_active")
  status           PROPERTY_STATUS
  saleValue        Float?             @map("sale_value")
  rentalValue      Float?             @map("rental_value")
  buildingArea     String             @map("building_area")
  landArea         String             @map("land_area")
  images           String[]           @default([])
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp
  updatedAt        DateTime           @default(now()) @map("updated_at") @db.Timestamp
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamp
  address          Address            @relation(fields: [addressId], references: [id])
  addressId        String             @map("address_id") @db.ObjectId
  type             Type               @relation(fields: [typeId], references: [id])
  typeId           String             @map("type_id") @db.ObjectId
  realEstate       RealEstate         @relation(fields: [realEstateId], references: [id])
  realEstateId     String             @map("real_estate_id") @db.ObjectId
  customerProperty CustomerProperty[]

  @@map("property")
}

enum PROPERTY_STATUS {
  ALUGADA
  VENDIDA
  CANCELADO
}

model Type {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime   @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime?  @map("deleted_at") @db.Timestamp
  property  Property[]

  @@map("type")
}

model Address {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  street       String
  number       String
  neighborhood String
  city         String
  zipCode      Int          @map("zip_code")
  state        String
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime     @default(now()) @map("updated_at") @db.Timestamp
  deletedAt    DateTime?    @map("deleted_at") @db.Timestamp
  property     Property[]
  realEstate   RealEstate[]
  customer     Customer[]

  @@map("address")
}

model UserRole {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.ObjectId
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @map("role_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("user_role")
}

model Role {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  description    String?
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamp
  userRole       UserRole[]
  rolePermission RolePermission[]

  @@map("role")
}

model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @map("role_id") @db.ObjectId
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id") @db.ObjectId

  @@map("role_permission")
}

model Permission {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamp
  rolePermission RolePermission[]

  @@map("permission")
}

model Log {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  collection String   @db.String
  action     String
  query      Json?
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp

  @@map("log")
}
